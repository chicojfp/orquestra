# ---------------------------------------------
# Example of a simple BNF grammar for arithmetic expressions
# ---------------------------------------------

<exp> := <ClickCommand> | <GoToURLCommand> | <FillInputCommand> | 
		 <FilterCommand> | <SwitchWindowCommand> | <SelectCommand> | <CopyCommand> |
		 <GoToWindowCommand> | <WaitCommand> | <RunCommand> | <VerifyCommand> | <ForEachCommand> |
		 <SetVarCommand>;

<ClickCommand> := <click> <nona> <complexItem> " <name> ";
<click> := Clique | clique;
<nona> := no | na | No | Na;

<complexItem> := <item> <partial> | <item> ;
<partial> := que contém;


<GoToURLCommand> := Acesse <url>;


<FillInputCommand> := Preencha o <item> " <name> " com <fillOptions> ;
<fillOptions> := o <OrigemDado> | <sendKey>;
<OrigemDado> := valor " <value> " | <key> de @ <variavel> ;
<sendKey> := Enter;

<FilterCommand> := <nona> <item> <filterargs> <exp>;
<filterargs> := , | <order> , | " <value> " , | <partialMatch> " <partialValue> " , ;
<partialMatch> := que contém;


<SwitchWindowCommand> := Ir para popup " <descricao> " ;


<SelectCommand> := Selecione <article> <complexItem> " <value> " na <item> " <name> " ;
<article> := o | a | O | A ;


<CopyCommand> := Salve o valor do <item> " <name> " como " <variableName> " ;


<GoToWindowCommand> := Ir para o popup " <descricao> ";


<WaitCommand> := Aguarde <condition> ;
<condition> := <article> <item> estar <action> | <time> s <predicate> ;
<predicate> :=  . | pelo <item> | pela rota <url> ;

<RunCommand> := Execute o " <name> " ;

<VerifyCommand> := O <item> " <name> " deve ser <action>;
<action> := <not> <term> | <term> ;
<term> := <propIsDisplayed> | <propIsEnabled>;
<propIsDisplayed> := visível;
<propIsEnabled> := clicável;
<not> := não ;

<ForEachCommand> := Para cada <item> execute o comando: " <name> " ;

<SetVarCommand> := Defina @ <item> como <complexValue> ;

<complexValue> := " <value> " | <complexValueList> ;

<complexValueList> := <complexValueItem> , <complexValue>  | <complexValueItem>;

<complexValueItem> := <key> " <value> ";


# This last declaration defines the non-terminal symbol num as any
# sequence of symbols matching the regular expression enclosed between
# the ^ and $ characters.
<num> := ^\w+;
<time> := ^\d+;
<item> := ^[\w*ã.*\p{L}]+;
<key> := ^[\w*ã.*\p{L}]+;
<variavel> := ^[\w*ã.*\p{L}]+;
<value> := ^[\d\-\w@!$%&*/:;<=>?@^_{}~$\s/:.,\p{L})(]+;
<partialValue> := ^[\d\-\w@!$%&*/:;<=>?@^_{}~$\s/:.,\p{L})(]+;
# "#$%&'()*+,-./:;<=>?@[\]^_`{|}~$#%ˆ
<name> := ^[-\w* *:*/*.*ª\p{L})(\-$]*;
<combo> := ^[\w*\s*]+;
<descricao> := ^[\-\w\s/:.\p{L})(]+;
<order> := ^\w+;
<url> := ^[\w:/.-\_]+;
<variableName> := ^[\w:/.]+;